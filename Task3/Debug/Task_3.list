
Task_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000688  08000690  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000688  08000688  00010690  2**0
                  CONTENTS
  4 .ARM          00000000  08000688  08000688  00010690  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000688  08000690  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000688  08000688  00010688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800068c  0800068c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000690  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000690  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010690  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ca6  00000000  00000000  000106c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000036b  00000000  00000000  00011366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  000116d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00011778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de85  00000000  00000000  000117e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001083  00000000  00000000  0001f665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fc6e  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00070356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  000703ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000670 	.word	0x08000670

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000670 	.word	0x08000670

080001d4 <main>:
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"
#define SET_2BITS(REG,BIT) (REG|=(1<<BIT*2))

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	GPIO_Init('B',3, INPUT, PUSH_PULL);
 80001da:	2300      	movs	r3, #0
 80001dc:	2200      	movs	r2, #0
 80001de:	2103      	movs	r1, #3
 80001e0:	2042      	movs	r0, #66	; 0x42
 80001e2:	f000 f8a1 	bl	8000328 <GPIO_Init>
	SET_2BITS(GPIOB_PUPDR,3); // set input pin 3 as pull up resistor
 80001e6:	4b31      	ldr	r3, [pc, #196]	; (80002ac <main+0xd8>)
 80001e8:	68db      	ldr	r3, [r3, #12]
 80001ea:	4a30      	ldr	r2, [pc, #192]	; (80002ac <main+0xd8>)
 80001ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001f0:	60d3      	str	r3, [r2, #12]
	for (int i =5; i<=7; i++){
 80001f2:	2305      	movs	r3, #5
 80001f4:	617b      	str	r3, [r7, #20]
 80001f6:	e008      	b.n	800020a <main+0x36>
		 GPIO_Init('B', i, OUTPUT, PUSH_PULL);
 80001f8:	6979      	ldr	r1, [r7, #20]
 80001fa:	2300      	movs	r3, #0
 80001fc:	2201      	movs	r2, #1
 80001fe:	2042      	movs	r0, #66	; 0x42
 8000200:	f000 f892 	bl	8000328 <GPIO_Init>
	for (int i =5; i<=7; i++){
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	3301      	adds	r3, #1
 8000208:	617b      	str	r3, [r7, #20]
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	2b07      	cmp	r3, #7
 800020e:	ddf3      	ble.n	80001f8 <main+0x24>
	 }
	int color = 1;
 8000210:	2301      	movs	r3, #1
 8000212:	613b      	str	r3, [r7, #16]
  while (1) {
	  int button_state = GPIO_ReadPin('B', 3); // save the state of the push button
 8000214:	2103      	movs	r1, #3
 8000216:	2042      	movs	r0, #66	; 0x42
 8000218:	f000 f9da 	bl	80005d0 <GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	607b      	str	r3, [r7, #4]
	  	 for (int i=0; i<1000; i++){} //delay
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	e002      	b.n	800022c <main+0x58>
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	3301      	adds	r3, #1
 800022a:	60fb      	str	r3, [r7, #12]
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000232:	dbf8      	blt.n	8000226 <main+0x52>
	  	 if (button_state && !(GPIO_ReadPin('B', 3))){ //check the state of the push button
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0ec      	beq.n	8000214 <main+0x40>
 800023a:	2103      	movs	r1, #3
 800023c:	2042      	movs	r0, #66	; 0x42
 800023e:	f000 f9c7 	bl	80005d0 <GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1e5      	bne.n	8000214 <main+0x40>
	  		for (int i =5; i<=7; i++){
 8000248:	2305      	movs	r3, #5
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	e008      	b.n	8000260 <main+0x8c>
	  				 GPIO_WritePin('B', i, 0); 	  			//reset the pins
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	2200      	movs	r2, #0
 8000252:	4619      	mov	r1, r3
 8000254:	2042      	movs	r0, #66	; 0x42
 8000256:	f000 f949 	bl	80004ec <GPIO_WritePin>
	  		for (int i =5; i<=7; i++){
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	3301      	adds	r3, #1
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	2b07      	cmp	r3, #7
 8000264:	ddf3      	ble.n	800024e <main+0x7a>
	  			 }
	  			if(color == 8){
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	2b08      	cmp	r3, #8
 800026a:	d101      	bne.n	8000270 <main+0x9c>
	  				color = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	613b      	str	r3, [r7, #16]
	  			}
	  			GPIO_WritePin('B', 5, color&1);
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	461a      	mov	r2, r3
 8000278:	2105      	movs	r1, #5
 800027a:	2042      	movs	r0, #66	; 0x42
 800027c:	f000 f936 	bl	80004ec <GPIO_WritePin>
	  			GPIO_WritePin('B', 6, (color>>1)&1);
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	105b      	asrs	r3, r3, #1
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	461a      	mov	r2, r3
 800028a:	2106      	movs	r1, #6
 800028c:	2042      	movs	r0, #66	; 0x42
 800028e:	f000 f92d 	bl	80004ec <GPIO_WritePin>
	  			GPIO_WritePin('B', 7, (color>>2)&1);
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	109b      	asrs	r3, r3, #2
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	461a      	mov	r2, r3
 800029c:	2107      	movs	r1, #7
 800029e:	2042      	movs	r0, #66	; 0x42
 80002a0:	f000 f924 	bl	80004ec <GPIO_WritePin>
	  			color++;
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	3301      	adds	r3, #1
 80002a8:	613b      	str	r3, [r7, #16]
  while (1) {
 80002aa:	e7b3      	b.n	8000214 <main+0x40>
 80002ac:	40020400 	.word	0x40020400

080002b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <SystemInit+0x20>)
 80002b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ba:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x20>)
 80002bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800030c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002da:	490e      	ldr	r1, [pc, #56]	; (8000314 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002f0:	4c0b      	ldr	r4, [pc, #44]	; (8000320 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002fe:	f7ff ffd7 	bl	80002b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000302:	f000 f991 	bl	8000628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000306:	f7ff ff65 	bl	80001d4 <main>
  bx  lr    
 800030a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800030c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000690 	.word	0x08000690
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <GPIO_Init>:
 */
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"
void GPIO_Init( char Port, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	60b9      	str	r1, [r7, #8]
 8000330:	607a      	str	r2, [r7, #4]
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	4603      	mov	r3, r0
 8000336:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port)
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	2b41      	cmp	r3, #65	; 0x41
 800033c:	d002      	beq.n	8000344 <GPIO_Init+0x1c>
 800033e:	2b42      	cmp	r3, #66	; 0x42
 8000340:	d064      	beq.n	800040c <GPIO_Init+0xe4>
					break;
				}//end switch
		break;
	}

}
 8000342:	e0c7      	b.n	80004d4 <GPIO_Init+0x1ac>
				RCC_AHB1ENR |= (0x01 <<0);
 8000344:	4b66      	ldr	r3, [pc, #408]	; (80004e0 <GPIO_Init+0x1b8>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a65      	ldr	r2, [pc, #404]	; (80004e0 <GPIO_Init+0x1b8>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b03      	cmp	r3, #3
 8000354:	d83b      	bhi.n	80003ce <GPIO_Init+0xa6>
 8000356:	a201      	add	r2, pc, #4	; (adr r2, 800035c <GPIO_Init+0x34>)
 8000358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035c:	0800036d 	.word	0x0800036d
 8000360:	08000387 	.word	0x08000387
 8000364:	0800039f 	.word	0x0800039f
 8000368:	080003b7 	.word	0x080003b7
							GPIOA_MODER &= ~(0x03 << 2*PIN_NO);
 800036c:	4b5d      	ldr	r3, [pc, #372]	; (80004e4 <GPIO_Init+0x1bc>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	68ba      	ldr	r2, [r7, #8]
 8000372:	0052      	lsls	r2, r2, #1
 8000374:	2103      	movs	r1, #3
 8000376:	fa01 f202 	lsl.w	r2, r1, r2
 800037a:	43d2      	mvns	r2, r2
 800037c:	4611      	mov	r1, r2
 800037e:	4a59      	ldr	r2, [pc, #356]	; (80004e4 <GPIO_Init+0x1bc>)
 8000380:	400b      	ands	r3, r1
 8000382:	6013      	str	r3, [r2, #0]
					break;
 8000384:	e023      	b.n	80003ce <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x01 << 2*PIN_NO);
 8000386:	4b57      	ldr	r3, [pc, #348]	; (80004e4 <GPIO_Init+0x1bc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	0052      	lsls	r2, r2, #1
 800038e:	2101      	movs	r1, #1
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	4611      	mov	r1, r2
 8000396:	4a53      	ldr	r2, [pc, #332]	; (80004e4 <GPIO_Init+0x1bc>)
 8000398:	430b      	orrs	r3, r1
 800039a:	6013      	str	r3, [r2, #0]
					break;
 800039c:	e017      	b.n	80003ce <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x02 << 2*PIN_NO);
 800039e:	4b51      	ldr	r3, [pc, #324]	; (80004e4 <GPIO_Init+0x1bc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	0052      	lsls	r2, r2, #1
 80003a6:	2102      	movs	r1, #2
 80003a8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a4d      	ldr	r2, [pc, #308]	; (80004e4 <GPIO_Init+0x1bc>)
 80003b0:	430b      	orrs	r3, r1
 80003b2:	6013      	str	r3, [r2, #0]
					break;
 80003b4:	e00b      	b.n	80003ce <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x03 << 2*PIN_NO);
 80003b6:	4b4b      	ldr	r3, [pc, #300]	; (80004e4 <GPIO_Init+0x1bc>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	68ba      	ldr	r2, [r7, #8]
 80003bc:	0052      	lsls	r2, r2, #1
 80003be:	2103      	movs	r1, #3
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a47      	ldr	r2, [pc, #284]	; (80004e4 <GPIO_Init+0x1bc>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6013      	str	r3, [r2, #0]
					break;
 80003cc:	bf00      	nop
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d003      	beq.n	80003dc <GPIO_Init+0xb4>
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d00c      	beq.n	80003f4 <GPIO_Init+0xcc>
		break;
 80003da:	e07b      	b.n	80004d4 <GPIO_Init+0x1ac>
							GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 80003dc:	4b41      	ldr	r3, [pc, #260]	; (80004e4 <GPIO_Init+0x1bc>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2101      	movs	r1, #1
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	fa01 f202 	lsl.w	r2, r1, r2
 80003e8:	43d2      	mvns	r2, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a3d      	ldr	r2, [pc, #244]	; (80004e4 <GPIO_Init+0x1bc>)
 80003ee:	400b      	ands	r3, r1
 80003f0:	6053      	str	r3, [r2, #4]
					break;
 80003f2:	e00a      	b.n	800040a <GPIO_Init+0xe2>
							GPIOA_OTYPER |= (0x01<<PIN_NO);
 80003f4:	4b3b      	ldr	r3, [pc, #236]	; (80004e4 <GPIO_Init+0x1bc>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	2101      	movs	r1, #1
 80003fa:	68ba      	ldr	r2, [r7, #8]
 80003fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000400:	4611      	mov	r1, r2
 8000402:	4a38      	ldr	r2, [pc, #224]	; (80004e4 <GPIO_Init+0x1bc>)
 8000404:	430b      	orrs	r3, r1
 8000406:	6053      	str	r3, [r2, #4]
					break;
 8000408:	bf00      	nop
		break;
 800040a:	e063      	b.n	80004d4 <GPIO_Init+0x1ac>
				RCC_AHB1ENR |= (0x01 <<1);
 800040c:	4b34      	ldr	r3, [pc, #208]	; (80004e0 <GPIO_Init+0x1b8>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a33      	ldr	r2, [pc, #204]	; (80004e0 <GPIO_Init+0x1b8>)
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b03      	cmp	r3, #3
 800041c:	d83b      	bhi.n	8000496 <GPIO_Init+0x16e>
 800041e:	a201      	add	r2, pc, #4	; (adr r2, 8000424 <GPIO_Init+0xfc>)
 8000420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000424:	08000435 	.word	0x08000435
 8000428:	0800044f 	.word	0x0800044f
 800042c:	08000467 	.word	0x08000467
 8000430:	0800047f 	.word	0x0800047f
							GPIOB_MODER &= ~(0x03 << 2*PIN_NO);
 8000434:	4b2c      	ldr	r3, [pc, #176]	; (80004e8 <GPIO_Init+0x1c0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	0052      	lsls	r2, r2, #1
 800043c:	2103      	movs	r1, #3
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	43d2      	mvns	r2, r2
 8000444:	4611      	mov	r1, r2
 8000446:	4a28      	ldr	r2, [pc, #160]	; (80004e8 <GPIO_Init+0x1c0>)
 8000448:	400b      	ands	r3, r1
 800044a:	6013      	str	r3, [r2, #0]
					break;
 800044c:	e023      	b.n	8000496 <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x01 << 2*PIN_NO);
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <GPIO_Init+0x1c0>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	0052      	lsls	r2, r2, #1
 8000456:	2101      	movs	r1, #1
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a22      	ldr	r2, [pc, #136]	; (80004e8 <GPIO_Init+0x1c0>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6013      	str	r3, [r2, #0]
					break;
 8000464:	e017      	b.n	8000496 <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x02 << 2*PIN_NO);
 8000466:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <GPIO_Init+0x1c0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	0052      	lsls	r2, r2, #1
 800046e:	2102      	movs	r1, #2
 8000470:	fa01 f202 	lsl.w	r2, r1, r2
 8000474:	4611      	mov	r1, r2
 8000476:	4a1c      	ldr	r2, [pc, #112]	; (80004e8 <GPIO_Init+0x1c0>)
 8000478:	430b      	orrs	r3, r1
 800047a:	6013      	str	r3, [r2, #0]
					break;
 800047c:	e00b      	b.n	8000496 <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x03 << 2*PIN_NO);
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <GPIO_Init+0x1c0>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	0052      	lsls	r2, r2, #1
 8000486:	2103      	movs	r1, #3
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	4611      	mov	r1, r2
 800048e:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <GPIO_Init+0x1c0>)
 8000490:	430b      	orrs	r3, r1
 8000492:	6013      	str	r3, [r2, #0]
					break;
 8000494:	bf00      	nop
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d003      	beq.n	80004a4 <GPIO_Init+0x17c>
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d00c      	beq.n	80004bc <GPIO_Init+0x194>
		break;
 80004a2:	e016      	b.n	80004d2 <GPIO_Init+0x1aa>
							GPIOB_OTYPER &= ~(0x01<<PIN_NO);
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <GPIO_Init+0x1c0>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2101      	movs	r1, #1
 80004aa:	68ba      	ldr	r2, [r7, #8]
 80004ac:	fa01 f202 	lsl.w	r2, r1, r2
 80004b0:	43d2      	mvns	r2, r2
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <GPIO_Init+0x1c0>)
 80004b6:	400b      	ands	r3, r1
 80004b8:	6053      	str	r3, [r2, #4]
					break;
 80004ba:	e00a      	b.n	80004d2 <GPIO_Init+0x1aa>
							GPIOB_OTYPER |= (0x01<<PIN_NO);
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <GPIO_Init+0x1c0>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2101      	movs	r1, #1
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <GPIO_Init+0x1c0>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6053      	str	r3, [r2, #4]
					break;
 80004d0:	bf00      	nop
		break;
 80004d2:	bf00      	nop
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40020400 	.word	0x40020400

080004ec <GPIO_WritePin>:

unsigned char GPIO_WritePin(char Port, unsigned int PIN_NO, unsigned int Data)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	switch(Port)
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	2b41      	cmp	r3, #65	; 0x41
 80004fe:	d002      	beq.n	8000506 <GPIO_WritePin+0x1a>
 8000500:	2b42      	cmp	r3, #66	; 0x42
 8000502:	d02d      	beq.n	8000560 <GPIO_WritePin+0x74>
 8000504:	e059      	b.n	80005ba <GPIO_WritePin+0xce>
	{
		case('A'):
			if((GPIOA_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 1)
 8000506:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <GPIO_WritePin+0xdc>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	0052      	lsls	r2, r2, #1
 800050e:	2103      	movs	r1, #3
 8000510:	fa01 f202 	lsl.w	r2, r1, r2
 8000514:	401a      	ands	r2, r3
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	fa22 f303 	lsr.w	r3, r2, r3
 800051e:	2b01      	cmp	r3, #1
 8000520:	d11b      	bne.n	800055a <GPIO_WritePin+0x6e>
			{
			     if(Data)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00a      	beq.n	800053e <GPIO_WritePin+0x52>
			     {
			    	 GPIOA_ODR |= (1<<PIN_NO);
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <GPIO_WritePin+0xdc>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	2101      	movs	r1, #1
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	4611      	mov	r1, r2
 8000536:	4a24      	ldr	r2, [pc, #144]	; (80005c8 <GPIO_WritePin+0xdc>)
 8000538:	430b      	orrs	r3, r1
 800053a:	6153      	str	r3, [r2, #20]
 800053c:	e00a      	b.n	8000554 <GPIO_WritePin+0x68>
			     }
			     else
			     {
			    	 GPIOA_ODR &= ~(1<<PIN_NO);
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <GPIO_WritePin+0xdc>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	2101      	movs	r1, #1
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	fa01 f202 	lsl.w	r2, r1, r2
 800054a:	43d2      	mvns	r2, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <GPIO_WritePin+0xdc>)
 8000550:	400b      	ands	r3, r1
 8000552:	6153      	str	r3, [r2, #20]
			     }
				result = OK;
 8000554:	2300      	movs	r3, #0
 8000556:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				result = NOK;
			}
		break;
 8000558:	e02f      	b.n	80005ba <GPIO_WritePin+0xce>
				result = NOK;
 800055a:	2301      	movs	r3, #1
 800055c:	75fb      	strb	r3, [r7, #23]
		break;
 800055e:	e02c      	b.n	80005ba <GPIO_WritePin+0xce>
		case('B'):
				if((GPIOB_MODER & (0x01 << 2*PIN_NO))>> (2*PIN_NO))
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <GPIO_WritePin+0xe0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	0052      	lsls	r2, r2, #1
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	401a      	ands	r2, r3
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	fa22 f303 	lsr.w	r3, r2, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d01b      	beq.n	80005b4 <GPIO_WritePin+0xc8>
				{
					 if(Data)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00a      	beq.n	8000598 <GPIO_WritePin+0xac>
					 {
						 GPIOB_ODR |= (1<<PIN_NO);
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <GPIO_WritePin+0xe0>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	2101      	movs	r1, #1
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	4611      	mov	r1, r2
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <GPIO_WritePin+0xe0>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	e00a      	b.n	80005ae <GPIO_WritePin+0xc2>
					 }
					 else
					 {
						 GPIOB_ODR &= ~(1<<PIN_NO);
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <GPIO_WritePin+0xe0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	2101      	movs	r1, #1
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	43d2      	mvns	r2, r2
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <GPIO_WritePin+0xe0>)
 80005aa:	400b      	ands	r3, r1
 80005ac:	6153      	str	r3, [r2, #20]
					 }
					result = OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	75fb      	strb	r3, [r7, #23]
				else
				{
					result = NOK;
				}

		break;
 80005b2:	e001      	b.n	80005b8 <GPIO_WritePin+0xcc>
					result = NOK;
 80005b4:	2301      	movs	r3, #1
 80005b6:	75fb      	strb	r3, [r7, #23]
		break;
 80005b8:	bf00      	nop

	}// end switch

	return result;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	371c      	adds	r7, #28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020400 	.word	0x40020400

080005d0 <GPIO_ReadPin>:

unsigned char GPIO_ReadPin(char Port, unsigned int PIN_NO){
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
	unsigned char data;
	switch(Port){
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2b41      	cmp	r3, #65	; 0x41
 80005e0:	d002      	beq.n	80005e8 <GPIO_ReadPin+0x18>
 80005e2:	2b42      	cmp	r3, #66	; 0x42
 80005e4:	d00a      	beq.n	80005fc <GPIO_ReadPin+0x2c>
 80005e6:	e013      	b.n	8000610 <GPIO_ReadPin+0x40>
		case('A'):
			data = (GPIOA_IDR >>PIN_NO) & 1;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <GPIO_ReadPin+0x50>)
 80005ea:	691a      	ldr	r2, [r3, #16]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	fa22 f303 	lsr.w	r3, r2, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	73fb      	strb	r3, [r7, #15]
			break;
 80005fa:	e009      	b.n	8000610 <GPIO_ReadPin+0x40>
		case('B'):
			data = (GPIOB_IDR>>PIN_NO) & 1;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <GPIO_ReadPin+0x54>)
 80005fe:	691a      	ldr	r2, [r3, #16]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	fa22 f303 	lsr.w	r3, r2, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
			break;
 800060e:	bf00      	nop
	}
	return data;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400

08000628 <__libc_init_array>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4d0d      	ldr	r5, [pc, #52]	; (8000660 <__libc_init_array+0x38>)
 800062c:	4c0d      	ldr	r4, [pc, #52]	; (8000664 <__libc_init_array+0x3c>)
 800062e:	1b64      	subs	r4, r4, r5
 8000630:	10a4      	asrs	r4, r4, #2
 8000632:	2600      	movs	r6, #0
 8000634:	42a6      	cmp	r6, r4
 8000636:	d109      	bne.n	800064c <__libc_init_array+0x24>
 8000638:	4d0b      	ldr	r5, [pc, #44]	; (8000668 <__libc_init_array+0x40>)
 800063a:	4c0c      	ldr	r4, [pc, #48]	; (800066c <__libc_init_array+0x44>)
 800063c:	f000 f818 	bl	8000670 <_init>
 8000640:	1b64      	subs	r4, r4, r5
 8000642:	10a4      	asrs	r4, r4, #2
 8000644:	2600      	movs	r6, #0
 8000646:	42a6      	cmp	r6, r4
 8000648:	d105      	bne.n	8000656 <__libc_init_array+0x2e>
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000650:	4798      	blx	r3
 8000652:	3601      	adds	r6, #1
 8000654:	e7ee      	b.n	8000634 <__libc_init_array+0xc>
 8000656:	f855 3b04 	ldr.w	r3, [r5], #4
 800065a:	4798      	blx	r3
 800065c:	3601      	adds	r6, #1
 800065e:	e7f2      	b.n	8000646 <__libc_init_array+0x1e>
 8000660:	08000688 	.word	0x08000688
 8000664:	08000688 	.word	0x08000688
 8000668:	08000688 	.word	0x08000688
 800066c:	0800068c 	.word	0x0800068c

08000670 <_init>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr

0800067c <_fini>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr
