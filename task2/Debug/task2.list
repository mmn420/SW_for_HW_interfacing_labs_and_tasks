
task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  08000394  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00010394  2**0
                  CONTENTS
  4 .ARM          00000000  0800038c  0800038c  00010394  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800038c  08000394  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000394  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000394  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009ae  00000000  00000000  000103c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000244  00000000  00000000  00010d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00011028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd83  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a37  00000000  00000000  0001edf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fbe6  00000000  00000000  0001f82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f410  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  0006f464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000374 	.word	0x08000374

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000374 	.word	0x08000374

080001d4 <main>:
#define BIT_IS_SET(REG,BIT) ( REG & (1<<BIT) )

/* Check if a specific bit is cleared in any register and return true if yes */
#define BIT_IS_CLEAR(REG,BIT) ( !(REG & (1<<BIT)) )

int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
	SET_BIT(RCC_AHB1ENR,1);
 80001da:	4b34      	ldr	r3, [pc, #208]	; (80002ac <main+0xd8>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a33      	ldr	r2, [pc, #204]	; (80002ac <main+0xd8>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
	CLEAR_2BITS(GPIOB_MODER,3); //set pin 3 as input
 80001e6:	4b32      	ldr	r3, [pc, #200]	; (80002b0 <main+0xdc>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a31      	ldr	r2, [pc, #196]	; (80002b0 <main+0xdc>)
 80001ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001f0:	6013      	str	r3, [r2, #0]
	SET_2BITS(GPIOB_MODER,5); //set pin 5 as output
 80001f2:	4b2f      	ldr	r3, [pc, #188]	; (80002b0 <main+0xdc>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a2e      	ldr	r2, [pc, #184]	; (80002b0 <main+0xdc>)
 80001f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001fc:	6013      	str	r3, [r2, #0]
	SET_2BITS(GPIOB_MODER,6); //set pin 6 as output
 80001fe:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <main+0xdc>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <main+0xdc>)
 8000204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000208:	6013      	str	r3, [r2, #0]
	SET_2BITS(GPIOB_MODER,7); // set pin 7 as output
 800020a:	4b29      	ldr	r3, [pc, #164]	; (80002b0 <main+0xdc>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a28      	ldr	r2, [pc, #160]	; (80002b0 <main+0xdc>)
 8000210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000214:	6013      	str	r3, [r2, #0]
	SET_2BITS(GPIOB_PUPDR,3); // set input pin 3 as pull up resistor
 8000216:	4b26      	ldr	r3, [pc, #152]	; (80002b0 <main+0xdc>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <main+0xdc>)
 800021c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000220:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB_OTYPER,5); // set output pin 3 as push-pull
 8000222:	4b23      	ldr	r3, [pc, #140]	; (80002b0 <main+0xdc>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	4a22      	ldr	r2, [pc, #136]	; (80002b0 <main+0xdc>)
 8000228:	f023 0320 	bic.w	r3, r3, #32
 800022c:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(GPIOB_OTYPER,6);
 800022e:	4b20      	ldr	r3, [pc, #128]	; (80002b0 <main+0xdc>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <main+0xdc>)
 8000234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000238:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(GPIOB_OTYPER,7);
 800023a:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <main+0xdc>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a1c      	ldr	r2, [pc, #112]	; (80002b0 <main+0xdc>)
 8000240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000244:	6053      	str	r3, [r2, #4]
	int color = 1;
 8000246:	2301      	movs	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]

  while (1) {
	 int button_state = GPIOB_IDR & (1<<3); // save the state of the push button
 800024a:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <main+0xdc>)
 800024c:	691b      	ldr	r3, [r3, #16]
 800024e:	f003 0308 	and.w	r3, r3, #8
 8000252:	607b      	str	r3, [r7, #4]
	 for (int i=0; i<10000; i++){} //delay
 8000254:	2300      	movs	r3, #0
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	e002      	b.n	8000260 <main+0x8c>
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	3301      	adds	r3, #1
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	f242 720f 	movw	r2, #9999	; 0x270f
 8000266:	4293      	cmp	r3, r2
 8000268:	ddf7      	ble.n	800025a <main+0x86>
	 if (button_state && BIT_IS_CLEAR(GPIOB_IDR,3)){ //check the state of the push button
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0ec      	beq.n	800024a <main+0x76>
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <main+0xdc>)
 8000272:	691b      	ldr	r3, [r3, #16]
 8000274:	f003 0308 	and.w	r3, r3, #8
 8000278:	2b00      	cmp	r3, #0
 800027a:	d1e6      	bne.n	800024a <main+0x76>
		 	GPIOB_ODR&=(~(7<<5)); //reset the ODR
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <main+0xdc>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <main+0xdc>)
 8000282:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000286:	6153      	str	r3, [r2, #20]
			if(color == 8){
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	2b08      	cmp	r3, #8
 800028c:	d101      	bne.n	8000292 <main+0xbe>
				color = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
			}
			GPIOB_ODR |= color <<5; //set the color to the ODR
 8000292:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <main+0xdc>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	0152      	lsls	r2, r2, #5
 800029a:	4611      	mov	r1, r2
 800029c:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <main+0xdc>)
 800029e:	430b      	orrs	r3, r1
 80002a0:	6153      	str	r3, [r2, #20]
			color++;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	3301      	adds	r3, #1
 80002a6:	60fb      	str	r3, [r7, #12]
  while (1) {
 80002a8:	e7cf      	b.n	800024a <main+0x76>
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020400 	.word	0x40020400

080002b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <SystemInit+0x20>)
 80002ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002be:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <SystemInit+0x20>)
 80002c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e000ed00 	.word	0xe000ed00

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002de:	490e      	ldr	r1, [pc, #56]	; (8000318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002f4:	4c0b      	ldr	r4, [pc, #44]	; (8000324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000302:	f7ff ffd7 	bl	80002b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000306:	f000 f811 	bl	800032c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f7ff ff63 	bl	80001d4 <main>
  bx  lr    
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	08000394 	.word	0x08000394
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	2000001c 	.word	0x2000001c

08000328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC_IRQHandler>
	...

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	4d0d      	ldr	r5, [pc, #52]	; (8000364 <__libc_init_array+0x38>)
 8000330:	4c0d      	ldr	r4, [pc, #52]	; (8000368 <__libc_init_array+0x3c>)
 8000332:	1b64      	subs	r4, r4, r5
 8000334:	10a4      	asrs	r4, r4, #2
 8000336:	2600      	movs	r6, #0
 8000338:	42a6      	cmp	r6, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	4d0b      	ldr	r5, [pc, #44]	; (800036c <__libc_init_array+0x40>)
 800033e:	4c0c      	ldr	r4, [pc, #48]	; (8000370 <__libc_init_array+0x44>)
 8000340:	f000 f818 	bl	8000374 <_init>
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	10a4      	asrs	r4, r4, #2
 8000348:	2600      	movs	r6, #0
 800034a:	42a6      	cmp	r6, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f855 3b04 	ldr.w	r3, [r5], #4
 8000354:	4798      	blx	r3
 8000356:	3601      	adds	r6, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	4798      	blx	r3
 8000360:	3601      	adds	r6, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
